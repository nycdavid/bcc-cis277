David Ko

Define integer type as QEl
Define Queue structure
  QEl Array[30]
  Integer Back
  String Name

Create function Enqueue
Create function Dequeue
Create function Empty
Create function Purge
Create function CreateQueue
Create function PrintQueue
Create function ShowMenu
Create function ChooseQueue

Function main()
  Initialize string variable `input`
  Initialize boolean variable `keepAlive`
  Initialize int variable `menuChoice`
  Print "Welcome to the Queue Program!"
  Initialize Queue variable q1 = Call CreateQueue()
  Initialize Queue variable q2 = Call CreateQueue()
  Initialize Queue variable q3 = Call CreateQueue()
  Initialize Queue variable q4 = Call CreateQueue()
  Initialize Array[4] variable allQueues = [q1, q2, q3, q4]

  Do Loop
    Set menuChoice = 0
    Call ShowMenu()
    Fetch User input into `menuChoice`
    Initialize Queue variable chosenQ
    If menuChoice != 8
      Initialize integer variable qIdx = Call ChooseQueue(allQueues)
      Set chosenQ = allQueues[qIdx]
    End If

    Switch on `menuChoice`
      When `menuChoice` is 1
        Print "You chose: "
        Print "Enqueueing"
        Call Enqueue(chosenQ)
      When `menuChoice` is 2
        Print "You chose: "
        Print "Enqueueing"
        Call Dequeue(chosenQ)
      When `menuChoice` is 3
        Print "You chose: "
        Print "Enqueueing"
        Call PrintQueue(chosenQ)
      When `menuChoice` is 4
        Print "You chose: "
        Print "Enqueueing"
        Call Purge(chosenQ)
      When `menuChoice` is 8
        Print "You chose: EXIT"
        Set keepAlive = false
      When `menuChoice` is none of the above
        Print "Invalid Choice."
    Print "Exiting program."
  End Do Loop
End Function

Function ShowMenu()
  Print "Options:"
  Print "1) Enqueue to a Queue"
  Print "2) Dequeue from a Queue"
  Print "3) Show Queue Status"
  Print "4) Purge Queue"
  Print "8) Exit"
  Print "Please choose your Queue operation:"
End Function

Function CreateQueue()
  Print "Create Queue"
  Initialize String variable name
  Initialize Integer variable noOfItems
  Initialize Queue variable newQ
  Print "What's the name of the Queue? "

  Fetch User input into `name`
  Set newQ.Name = name

  Print "How many items in the Queue? "
  Fetch User input into `noOfItems`
  For noOfItems
    Call Enqueue(newQ)
  End For
  return newQ;
End Function

Function Enqueue(Queue q)
  Initialize QEl variable item
  Print "Enter item: "
  Fetch User input into `item`
  Print "Enqueueing item..."
  Increment q.Back by 1
  Set q.container[q.Back] = item
End Function

Function Dequeue(Queue q)
  Print "Dequeueing item..."
  Initialize QEl variable front and Set = q.container[0]
  Set q.container[0] = NULL
  For Loop i < 30
    Initialize inter variable prev and Set = i - 1
    Set q.container[prev] = q.container[i]
  End For Loop
  Decrement q.Back
  return front
End Function

Function Empty(Queue q)
  Initialize Boolean variable empty and Set = q.Back
  return empty
End Function

Function Purge(Queue q)
  Print "Purging the Queue..."
  Set q.Back = -1
  For Loop i < 30
    Set q.container[i] = 0
  End For Loop
End Function

Function PrintQueue(Queue q)
  Initialize String variable empty and Set = Call Empty(q)
  Initialize Integer variable back and Set = Ternary q.Back == -1 ? 0 or q.Container[q.Back]

  Print "The front element is: " + q->container[0]
  Print "The back element is: "
  Print "Contents of the queue: "
  Print "| "
  For Loop i < q.Back
    Print q.container[i] + " | "
  End For Loop
  Print "The queue is: " + empty
End Function

Function ChooseQueue(Queue allQs[])
  Initialize Integer variable qChoice & Set = 0
  For Loop i < 4
    Print i + 1 + ") " + allQs[i].Name
  End For Loop
  Print "Please choose a Queue: "
  Fetch User input into `qChoice`
  return qChoice - 1;
End Function
